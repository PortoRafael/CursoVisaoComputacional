# -*- coding: utf-8 -*-
"""Visão Computacional: O Guia Completo - Detecção de Faces.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rB48JYSzSNnLQqsaDJuGJw2ePBclAP55

# Visão Computacional: O Guia Completo - Detecção de Faces

# OpenCV

## Carregamento da imagem
"""

import cv2 # OpenCV

from google.colab import drive
drive.mount('/content/drive')

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people1.jpg')

imagem.shape

#cv2.imshow(imagem)
from google.colab.patches import cv2_imshow
cv2_imshow(imagem)

imagem = cv2.resize(imagem, (800, 600))
imagem.shape

cv2_imshow(imagem)

600 * 800 * 3, 600 * 800

imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
cv2_imshow(imagem_cinza)

imagem_cinza.shape

"""## Detecção de faces"""

detector_facial = cv2.CascadeClassifier('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Cascades/haarcascade_frontalface_default.xml')

deteccoes = detector_facial.detectMultiScale(imagem_cinza)

deteccoes

len(deteccoes)

for x, y, w, h in deteccoes:
  #print(x, y, w, h)
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,255), 5)
cv2_imshow(imagem)

"""## Parâmetros haarcascades"""

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people1.jpg')
imagem = cv2.resize(imagem, (800, 600))
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
deteccoes = detector_facial.detectMultiScale(imagem_cinza, scaleFactor=1.09)
for (x, y, w, h) in deteccoes:
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 5)
cv2_imshow(imagem)

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people2.jpg')
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
deteccoes = detector_facial.detectMultiScale(imagem_cinza, scaleFactor=1.2, minNeighbors=3,
                                             minSize=(32,32), maxSize=(100,100))
for (x, y, w, h) in deteccoes:
  print(w, h)
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(imagem)

"""## Detecção de olhos"""

detector_olhos = cv2.CascadeClassifier('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Cascades/haarcascade_eye.xml')

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people1.jpg')
#imagem = cv2.resize(imagem, (800, 600))
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)

deteccoes = detector_facial.detectMultiScale(imagem_cinza, scaleFactor = 1.3, minSize = (30,30))
for (x, y, w, h) in deteccoes:
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 2)

deteccoes_olhos = detector_olhos.detectMultiScale(imagem_cinza, scaleFactor=1.09, minNeighbors=10, maxSize=(70,70))
for (x, y, w, h) in deteccoes_olhos:
  #print(w,h)
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,0,255), 2)

cv2_imshow(imagem)

"""## Outros objetos

### Carros
"""

detector_carros = cv2.CascadeClassifier('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Cascades/cars.xml')
imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/car.jpg')
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
deteccoes = detector_carros.detectMultiScale(imagem_cinza, scaleFactor = 1.03, minNeighbors=5)                                      
for (x, y, w, h) in deteccoes:
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(imagem)

"""### Relógios"""

detector_relogios = cv2.CascadeClassifier('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Cascades/clocks.xml')
imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/clock.jpg')
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
deteccoes = detector_relogios.detectMultiScale(imagem_cinza, scaleFactor = 1.03, minNeighbors=1)                                      
for (x, y, w, h) in deteccoes:
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(imagem)

"""### Corpo inteiro"""

detector_corpo = cv2.CascadeClassifier('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Cascades/fullbody.xml')
imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people3.jpg')
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
deteccoes = detector_corpo.detectMultiScale(imagem_cinza, scaleFactor = 1.05, minNeighbors=5,
                                              minSize = (50,50)) 
for (x, y, w, h) in deteccoes:
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(imagem)

"""# Dlib

Obs: execute a linha abaixo somente caso ocorra o erro "code: 9, reason: CUDNN_STATUS_NOT_SUPPORTED" (lembre-se de reiniciar o ambiente de execução caso já tenha importado o Dlib). Isso fará com que seja instalada uma versão anterior àquela que começou a dar o problema de conflito com a GPU do Colab.
"""

!pip install dlib==19.22.1

import dlib

dlib.__version__

"""## Detecção de faces com HOG"""

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people2.jpg')
cv2_imshow(imagem)

detector_face_hog = dlib.get_frontal_face_detector()

deteccoes = detector_face_hog(imagem, 4) # escala

deteccoes, len(deteccoes)

for face in deteccoes:
  #print(face)
  #print(face.left())
  #print(face.top())
  #print(face.right())
  #print(face.bottom())
  l, t, r, b = face.left(), face.top(), face.right(), face.bottom()
  cv2.rectangle(imagem, (l, t), (r, b), (0,255,255), 2)
cv2_imshow(imagem)

"""## Detecção de faces com CNN (redes neurais convolucionais)"""

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people2.jpg')
detector_face_cnn = dlib.cnn_face_detection_model_v1('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Weights/mmod_human_face_detector.dat')

deteccoes = detector_face_cnn(imagem, 1)
for face in deteccoes:
  l, t, r, b, c = face.rect.left(), face.rect.top(), face.rect.right(), face.rect.bottom(), face.confidence
  print(c)
  cv2.rectangle(imagem, (l,t), (r,b), (255,255,0), 2)
cv2_imshow(imagem)

"""## Haarcascade x HOG x CNN

### Haarcascade
"""

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people3.jpg')
imagem_cinza = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
detector_haarcascade = cv2.CascadeClassifier('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Cascades/haarcascade_frontalface_default.xml')
deteccoes = detector_haarcascade.detectMultiScale(imagem_cinza, scaleFactor = 1.001, minNeighbors=5, minSize = (5,5))
for (x, y, w, h) in deteccoes:
  cv2.rectangle(imagem, (x, y), (x + w, y + h), (0,255,0), 2)
cv2_imshow(imagem)

"""### HOG"""

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people3.jpg')
detector_hog = dlib.get_frontal_face_detector()
deteccoes = detector_hog(imagem, 4)
for face in deteccoes:
    l, t, r, b = (face.left(), face.top(), face.right(), face.bottom())
    cv2.rectangle(imagem, (l, t), (r, b), (0, 255, 255), 2)
cv2_imshow(imagem)

"""### CNN"""

imagem = cv2.imread('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Images/people3.jpg')
detector_cnn = dlib.cnn_face_detection_model_v1('/content/drive/MyDrive/Cursos - recursos/Visão Computacional Guia Completo/Weights/mmod_human_face_detector.dat')
deteccoes = detector_cnn(imagem, 4)
for face in deteccoes:
  l, t, r, b, c = face.rect.left(), face.rect.top(), face.rect.right(), face.rect.bottom(), face.confidence
  print(c)
  cv2.rectangle(imagem, (l, t), (r, b), (255, 255, 0), 2)
cv2_imshow(imagem)